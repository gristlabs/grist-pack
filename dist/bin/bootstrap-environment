#!/bin/bash
# Helper script to securely generate random secrets and setup basic config

set -e

CONFIG_DIR=$(realpath $(dirname $0)/../config)
ENV_DIR=$(realpath $CONFIG_DIR/..)

green=$(tput setaf 2)
red=$(tput setaf 1)
normal=$(tput sgr0)

# Parses an Authelia generated secret for the value
function getSecret {
  cut -d ":" -f 2 <<< "$1" | tr -d '[:blank:]'
}

function generateSecureString {
  getSecret "$(docker run --rm authelia/authelia:4 authelia crypto rand --charset=rfc3986 --length="$1")"
}

function setUpDirStructure {
  echo "${green}Setting up directory structure${normal}"
  mkdir -p "$SECRETS_DIR/acme"
  mkdir -p "$SECRETS_DIR/traefik-certs"
  mkdir -p "$SECRETS_DIR/authelia-certs"

  mkdir -p "$PERSIST_DIR/authelia"
  mkdir -p "$PERSIST_DIR/grist"
}

function setConfigVariables {
  echo "${green}Setting up default environment variables${normal}"

  # Don't overwrite config if it already exists
  if [[ -e $ENV_DIR/.env ]]; then
    source .env
  fi

  export USERID=$(id -u)
  export GROUPID=$(id -g)
  export USERNAME=${USERNAME:-grist}
  export PASSWORD=${PASSWORD:-grist}
  export TEAM=${TEAM:-grist-team}
  export GRIST_DOMAIN=${GRIST_DOMAIN:-grist.localhost}
  export HTTPS_METHOD=${HTTPS_METHOD:-manual}
  export TRAEFIK_ENABLE_DASHBOARD=${TRAEFIK_ENABLE_DASHBOARD:-false}
  export PERSIST_DIR=${PERSIST_DIR:-${ENV_DIR}/persist}
  export SECRETS_DIR=${SECRETS_DIR:-${PERSIST_DIR}/secrets}
  export DEFAULT_EMAIL=${DEFAULT_EMAIL:-test@example.org}

  export GOOGLE_CLIENT_ID
  export GOOGLE_CLIENT_SECRET
  export MICROSOFT_CLIENT_ID
  export MICROSOFT_CLIENT_SECRET
}

function setSecretsVariables {
  if [[ -e $PERSIST_DIR/authelia/db.sqlite3 ]]; then
    echo "${red}Authelia's main configuration database has "\
         "already been populated. "
    echo "Not generating new secrets.${normal}"

    export GRIST_OIDC_IDP_CLIENT_ID
    export GRIST_OIDC_IDP_CLIENT_SECRET
    export DEX_CLIENT_SECRET
    return
  fi;

  echo "${green}Generating random secret variables${normal}"
  generateSecureString 128 > "$SECRETS_DIR/HMAC_SECRET"
  generateSecureString 128 > "$SECRETS_DIR/JWT_SECRET"
  generateSecureString 128 > "$SECRETS_DIR/SESSION_SECRET"
  generateSecureString 128 > "$SECRETS_DIR/STORAGE_ENCRYPTION_KEY"
  export GRIST_OIDC_IDP_CLIENT_ID=$(generateSecureString 64)
  export GRIST_OIDC_IDP_CLIENT_SECRET=$(generateSecureString 64)

  # Generates the OIDC secret key for the Dex client
  export CLIENT_SECRET_OUTPUT="$(docker run --rm authelia/authelia:4 authelia crypto hash generate pbkdf2 \
    --variant sha512 --random --random.length 72 --random.charset rfc3986)"
  export DEX_CLIENT_SECRET=$(getSecret "$(grep 'Password' <<< $CLIENT_SECRET_OUTPUT)")

  getSecret "$(grep 'Digest' <<< $CLIENT_SECRET_OUTPUT)" > "$SECRETS_DIR/DEX_CLIENT_SECRET_DIGEST"

  # Generate JWT certificates Authelia needs for OIDC
  docker run --rm -v $SECRETS_DIR/authelia-certs:/certs -u $(id -u):$(id -g) \
    authelia/authelia:4 authelia crypto certificate rsa generate -d /certs

}

function setUpSelfSignedCert {
  certfile=$SECRETS_DIR/traefik-certs/grist.crt
  keyfile=$SECRETS_DIR/traefik-certs/grist.key
  if [[ -e $certfile ]]; then
    echo "${red}Not overwriting $certfile, file already exists${normal}"
    return
  else
    echo "${green}Setting up a self-signed certificate for the ${GRIST_DOMAIN} domain${normal}"
    # Generate a default, self-signed TLS cert for traefik so at least we
    # have something
    openssl req -x509 -nodes -days 365 -newkey rsa:2048 -subj "/CN=${GRIST_DOMAIN}" \
      -addext "subjectAltName = DNS:${GRIST_DOMAIN}" \
      -keyout $keyfile -out $certfile
  fi

  # Create our own trusted ca-certificates.crt that included our self-signed cert.
  cat /etc/ssl/certs/ca-certificates.crt $SECRETS_DIR/traefik-certs/grist.crt > \
    $SECRETS_DIR/ca-certificates.crt
}

function setUpAdminUser {
  dbfile=$PERSIST_DIR/users_database.yml
  if [[ -e $dbfile ]]; then
    echo "${red}Not overwriting $dbfile, file already exists${normal}"
    return
  else
    echo "${green}Writing initial admin user credentials${normal}"
    export PASSWORD_HASH=$(docker run --rm authelia/authelia:4 authelia crypto hash generate argon2 --password "$PASSWORD" | cut -f 2 -d' ')
    envsubst < $CONFIG_DIR/authelia/users_database.yml.template > $dbfile
  fi
}

setConfigVariables
setUpDirStructure
setSecretsVariables
setUpSelfSignedCert
setUpAdminUser

envsubst < $CONFIG_DIR/env-template > $PERSIST_DIR/env-vars

# We keep everything the user might want to save in $PERSIST_DIR, so
# we symlink the env file, the one thing that has to sit outside
# $PERSIST_DIR.
ln -sf $PERSIST_DIR/env-vars $ENV_DIR/.env

# Make it prominent that the .env file exists
ln -sf $PERSIST_DIR/env-vars $ENV_DIR/env-vars
